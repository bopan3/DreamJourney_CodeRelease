import subprocess
from PIL import Image
import torch
from tqdm import tqdm
from torchvision.transforms import ToTensor
from pathlib import Path
from torchvision.io import write_video
import imageio
import argparse

INTERPOLATION_MODE = "ezAni_inpainting"

script_path_dict = {
    "KeyFrameDynamic_1024_DynCraft": "./script4externalModules/KeyFrameDynamic_1024_DynCraft.sh",
    "svd_inpainting": "./script4externalModules/svd_inpainting.sh",
    "KeyFrameDynamic_1024_svd": "./script4externalModules/KeyFrameDynamic_1024_svd.sh",
    "ezAni_inpainting": "./script4externalModules/ezAni_inpainting.sh",
    "cogVideoXFun_inpainting": "./script4externalModules/cogVideoXFun_inpainting.sh"
}


def svd_inpainting(save_dir, custom_mode_from_wonderJourney):
    """
    inpaint the warped keyframe interpolation seqence with svd model

    Parameters:
        save_dir (Path): A pathlib Path object indicating where to save the images.
    
    Output:
        lastframe (image): the PIL Image object of the last frame of the video: 
    """

    # set that the paths 
    origin_frame_dir = save_dir/ "images" / "frames_for_svd_inpainting"
    origin_frame_dir.mkdir(exist_ok=True, parents=True)
    origin_mask_dir = save_dir/ "images" / "masks_for_svd_inpainting"
    origin_mask_dir.mkdir(exist_ok=True, parents=True)
    output_frame_dir = save_dir/ "images" / "frames_after_svd_inpainting"
    output_frame_dir.mkdir(exist_ok=True, parents=True)
    result_analyze_dir = save_dir/ "images" / "result_analyze_dir"
    result_analyze_dir.mkdir(exist_ok=True, parents=True)

    # set script path
    script_path = script_path_dict[INTERPOLATION_MODE]


    # 使用 subprocess.run 来执行脚本  
    result = subprocess.run(["bash", script_path, str(origin_frame_dir), str(origin_mask_dir), str(output_frame_dir), str(result_analyze_dir)], capture_output=True, text=True)  
    
    # 打印脚本的输出  
    print("标准输出:", result.stdout)  
    print("标准错误:", result.stderr)  
    
    # 检查脚本的返回码  
    if result.returncode == 0:  
        print("脚本执行成功")  
    else:  
        print("脚本执行失败，返回码:", result.returncode)  
        
    # # load the last frame 
    # if FRAME_MODE == 25:
    #     lastframe = Image.open(output_frame_dir / "000024.png").convert('RGB')
    # elif FRAME_MODE == 14:
    #     lastframe = Image.open(output_frame_dir / "000013.png").convert('RGB')
    # else:
    #     NotImplementedError

    # return lastframe
    return

def run_inference(target_dir):
    # config
    CUSTOM_MODE = "wonderjourney"
    
    # read source directories generated by wonderjourney
    source_dir = Path(target_dir)
    all_rundir_raw = [str(inter_dir) for inter_dir in sorted(source_dir.glob('Interp*'), reverse=False) ]
    
    all_rundir = []
    
    for path in all_rundir_raw:
        all_rundir.append(Path(path))
    
    # run svd_inpcainting for each source folder
    for dir_idx in tqdm(range(0, len(all_rundir) )):
    # for dir_idx in tqdm(range(0, 10 )):
        rundir = all_rundir[dir_idx]
        svd_inpainting(rundir, CUSTOM_MODE)
    

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--target_dir', required= False)  
    return parser

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()

    if args.target_dir is None:
        raise("target_dir is required")

    run_inference(args.target_dir)